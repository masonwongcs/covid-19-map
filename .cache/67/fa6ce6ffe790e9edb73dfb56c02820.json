{"id":"node_modules/polylabel/index.js","dependencies":[{"name":"/Users/mason/Documents/covid-19-map/package.json","includedInParent":true,"mtime":1585217658283},{"name":"/Users/mason/Documents/covid-19-map/node_modules/polylabel/package.json","includedInParent":true,"mtime":1585215187731},{"name":"tinyqueue","loc":{"line":3,"column":20},"parent":"/Users/mason/Documents/covid-19-map/node_modules/polylabel/index.js","resolved":"/Users/mason/Documents/covid-19-map/node_modules/tinyqueue/index.js"}],"generated":{"js":"'use strict';\n\nvar Queue = require('tinyqueue');\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n    precision = precision || 1.0;\n\n    // find the bounding box of the outer ring\n    var minX, minY, maxX, maxY;\n    for (var i = 0; i < polygon[0].length; i++) {\n        var p = polygon[0][i];\n        if (!i || p[0] < minX) minX = p[0];\n        if (!i || p[1] < minY) minY = p[1];\n        if (!i || p[0] > maxX) maxX = p[0];\n        if (!i || p[1] > maxY) maxY = p[1];\n    }\n\n    var width = maxX - minX;\n    var height = maxY - minY;\n    var cellSize = Math.min(width, height);\n    var h = cellSize / 2;\n\n    // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n    var cellQueue = new Queue(null, compareMax);\n\n    if (cellSize === 0) return [minX, minY];\n\n    // cover polygon with initial cells\n    for (var x = minX; x < maxX; x += cellSize) {\n        for (var y = minY; y < maxY; y += cellSize) {\n            cellQueue.push(new Cell(x + h, y + h, h, polygon));\n        }\n    }\n\n    // take centroid as the first best guess\n    var bestCell = getCentroidCell(polygon);\n\n    // special case for rectangular polygons\n    var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n    if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n\n    var numProbes = cellQueue.length;\n\n    while (cellQueue.length) {\n        // pick the most promising cell from the queue\n        var cell = cellQueue.pop();\n\n        // update the best cell if we found a better one\n        if (cell.d > bestCell.d) {\n            bestCell = cell;\n            if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n        }\n\n        // do not drill down further if there's no chance of a better solution\n        if (cell.max - bestCell.d <= precision) continue;\n\n        // split the cell into four cells\n        h = cell.h / 2;\n        cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n        numProbes += 4;\n    }\n\n    if (debug) {\n        console.log('num probes: ' + numProbes);\n        console.log('best distance: ' + bestCell.d);\n    }\n\n    return [bestCell.x, bestCell.y];\n}\n\nfunction compareMax(a, b) {\n    return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n    this.x = x; // cell center x\n    this.y = y; // cell center y\n    this.h = h; // half the cell size\n    this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n    this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n}\n\n// signed distance from point to polygon outline (negative if point is outside)\nfunction pointToPolygonDist(x, y, polygon) {\n    var inside = false;\n    var minDistSq = Infinity;\n\n    for (var k = 0; k < polygon.length; k++) {\n        var ring = polygon[k];\n\n        for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n            var a = ring[i];\n            var b = ring[j];\n\n            if ((a[1] > y !== b[1] > y) &&\n                (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])) inside = !inside;\n\n            minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n        }\n    }\n\n    return (inside ? 1 : -1) * Math.sqrt(minDistSq);\n}\n\n// get polygon centroid\nfunction getCentroidCell(polygon) {\n    var area = 0;\n    var x = 0;\n    var y = 0;\n    var points = polygon[0];\n\n    for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n        var a = points[i];\n        var b = points[j];\n        var f = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * f;\n        y += (a[1] + b[1]) * f;\n        area += f * 3;\n    }\n    if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n    return new Cell(x / area, y / area, 0, polygon);\n}\n\n// get squared distance from a point to a segment\nfunction getSegDistSq(px, py, a, b) {\n\n    var x = a[0];\n    var y = a[1];\n    var dx = b[0] - x;\n    var dy = b[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = b[0];\n            y = b[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/polylabel/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/polylabel/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}}],"sources":{"node_modules/polylabel/index.js":"'use strict';\n\nvar Queue = require('tinyqueue');\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n    precision = precision || 1.0;\n\n    // find the bounding box of the outer ring\n    var minX, minY, maxX, maxY;\n    for (var i = 0; i < polygon[0].length; i++) {\n        var p = polygon[0][i];\n        if (!i || p[0] < minX) minX = p[0];\n        if (!i || p[1] < minY) minY = p[1];\n        if (!i || p[0] > maxX) maxX = p[0];\n        if (!i || p[1] > maxY) maxY = p[1];\n    }\n\n    var width = maxX - minX;\n    var height = maxY - minY;\n    var cellSize = Math.min(width, height);\n    var h = cellSize / 2;\n\n    // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n    var cellQueue = new Queue(null, compareMax);\n\n    if (cellSize === 0) return [minX, minY];\n\n    // cover polygon with initial cells\n    for (var x = minX; x < maxX; x += cellSize) {\n        for (var y = minY; y < maxY; y += cellSize) {\n            cellQueue.push(new Cell(x + h, y + h, h, polygon));\n        }\n    }\n\n    // take centroid as the first best guess\n    var bestCell = getCentroidCell(polygon);\n\n    // special case for rectangular polygons\n    var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n    if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n\n    var numProbes = cellQueue.length;\n\n    while (cellQueue.length) {\n        // pick the most promising cell from the queue\n        var cell = cellQueue.pop();\n\n        // update the best cell if we found a better one\n        if (cell.d > bestCell.d) {\n            bestCell = cell;\n            if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n        }\n\n        // do not drill down further if there's no chance of a better solution\n        if (cell.max - bestCell.d <= precision) continue;\n\n        // split the cell into four cells\n        h = cell.h / 2;\n        cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n        numProbes += 4;\n    }\n\n    if (debug) {\n        console.log('num probes: ' + numProbes);\n        console.log('best distance: ' + bestCell.d);\n    }\n\n    return [bestCell.x, bestCell.y];\n}\n\nfunction compareMax(a, b) {\n    return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n    this.x = x; // cell center x\n    this.y = y; // cell center y\n    this.h = h; // half the cell size\n    this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n    this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n}\n\n// signed distance from point to polygon outline (negative if point is outside)\nfunction pointToPolygonDist(x, y, polygon) {\n    var inside = false;\n    var minDistSq = Infinity;\n\n    for (var k = 0; k < polygon.length; k++) {\n        var ring = polygon[k];\n\n        for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n            var a = ring[i];\n            var b = ring[j];\n\n            if ((a[1] > y !== b[1] > y) &&\n                (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])) inside = !inside;\n\n            minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n        }\n    }\n\n    return (inside ? 1 : -1) * Math.sqrt(minDistSq);\n}\n\n// get polygon centroid\nfunction getCentroidCell(polygon) {\n    var area = 0;\n    var x = 0;\n    var y = 0;\n    var points = polygon[0];\n\n    for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n        var a = points[i];\n        var b = points[j];\n        var f = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * f;\n        y += (a[1] + b[1]) * f;\n        area += f * 3;\n    }\n    if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n    return new Cell(x / area, y / area, 0, polygon);\n}\n\n// get squared distance from a point to a segment\nfunction getSegDistSq(px, py, a, b) {\n\n    var x = a[0];\n    var y = a[1];\n    var dx = b[0] - x;\n    var dy = b[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = b[0];\n            y = b[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n"},"lineCount":157}},"error":null,"hash":"67af8ab5132ad49bb93db1d5f89bf4f9","cacheData":{"env":{}}}